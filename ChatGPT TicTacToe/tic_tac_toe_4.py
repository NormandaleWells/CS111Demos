'''
Generated by Chat GPT

For this version, I asked it to provide code that allows
the computer to always win.

It took several tries to get all the code, and even then
not all of it appeared in the code window.  I had to
cut and paste several pieces together to make this.

BUT: This version does not always win.  Then again, it also
doesn't always know it lost!  I tried the following sequence:
    Me: 1,1
    Computer: 1,2   already a losing move
    Me: 3,1
    Computer: 2,1   successful block
    Me: 2,2         guaranteed win
    Computer: 3,1   blocked one win
    Me: 3,3         unacknowledged win!!!
'''

import random

def print_board(board):
    # Print the current state of the board
    for i in range(3):
        print(" " + board[i][0] + " | " + board[i][1] + " | " + board[i][2])
        if i != 2:
            print("---|---|---")

def get_human_move(board):
    # Prompt the human player for their move and validate the input
    while True:
        move = input("Enter your move (row, column): ")
        row, col = move.split(",")
        row = int(row) - 1
        col = int(col) - 1
        if row < 0 or row > 2 or col < 0 or col > 2:
            print("Invalid input. Please enter a valid row and column number (1-3).")
        elif board[row][col] != " ":
            print("That space is already taken. Please choose another.")
        else:
            return (row, col)

def get_computer_move(board):
    # Choose the best possible move for the computer using the minimax algorithm
    best_score = -float("inf")
    best_move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, False)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    return best_move

def minimax(board, is_maximizing):
    # Recursive function to determine the best score for a given board state
    winner = check_win(board)
    if winner == "O":
        return 1
    elif winner == "X":
        return -1
    elif all(" " not in row for row in board):
        return 0
    if is_maximizing:
        best_score = -float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    score = minimax(board, False)
                    board[i][j] = " "
                    best_score = max(best_score, score)
        return best_score
    else:
        best_score = float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    score = minimax(board, True)
                    board[i][j] = " "
                    best_score = min(best_score, score)
        return best_score

def check_win(board):
    # Check if a player has won the game
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != " ": # Check rows
            return board[i][0]
        elif board[0][i] == board[1][i] == board[2][i] != " ": # Check columns
            return board[0][i]
    if board[0][0] == board[1][1] == board[2][2] != " ": # Check diagonals
        return
    if board[0][2] == board[1][1] == board[2][0] != " ":
        return board[0][2]
    return None

def play_game():
    # Play a game of tic-tac-toe
    board = [[" ", " ", " "] for i in range(3)]
    human_turn = random.choice([True, False])
    while True:
        print_board(board)
        if human_turn:
            print("Your turn:")
            row, col = get_human_move(board)
            board[row][col] = "X"
            winner = check_win(board)
            if winner == "X":
                print_board(board)
                print("Congratulations! You won!")
                break
            elif winner is None and all(" " not in row for row in board):
                print_board(board)
                print("It's a tie!")
                break
        else:
            print("Computer's turn:")
            row, col = get_computer_move(board)
            board[row][col] = "O"
            winner = check_win(board)
            if winner == "O":
                print_board(board)
                print("Sorry, you lost. Better luck next time!")
                break
            elif winner is None and all(" " not in row for row in board):
                print_board(board)
                print("It's a tie!")
                break
        human_turn = not human_turn

play_game()